service: catan-discord
frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-lift
  - serverless-offline

provider:
  name: aws
  region: us-east-1
  runtime: nodejs16.x
  stage: ${opt:stage}
  httpApi:
    cors: true
  environment:
    ONBOARD_QUEUE: ${construct:onboardQueue.queueUrl}
    PUBLIC_KEY: ${self:custom.global.PUBLIC_KEY.${self:provider.stage}}
    STAGE: ${self:provider.stage}
    TABLE: ${self:service}-${opt:stage}-table
    WEB_URL: ${construct:web.cname}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:*:*:table/${self:provider.environment.TABLE}
            - arn:aws:dynamodb:*:*:table/${self:provider.environment.TABLE}/index/*

custom: ${file(./serverless/custom.yml)}

functions:
  connection:
    handler: functions/connection.handler
    events:
      - websocket:
          route: $connect
      # - websocket:
      #     route: $disconnect

  uploadMap:
    name: ${self:service}-${opt:stage}-upload-map
    handler: functions/upload-map.handler

  game:
    name: ${self:service}-${opt:stage}-game
    handler: functions/game.handler
    events:
      - httpApi:
          path: /game
          method: post

  bot:
    name: ${self:service}-${opt:stage}-bot
    handler: functions/bot/main.handler
    events:
      - httpApi:
          path: /bot
          method: post

resources:
  Resources:
    catanDiscordTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties: ${file(./serverless/table-properties.js)}

constructs:
  onboardQueue:
    type: queue
    worker:
      handler: functions/onboard-queue-worker.handler

  web:
    type: single-page-app
    path: ../web/dist
